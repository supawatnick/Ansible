### Install shyaml >> sudo pip install shyaml
### Install VMware lib >> sudo pip install pyvmomi
### Install NetApp lib >> sudo pip install netapp-lib solidfire-sdk-python requests
### Install VMware Collection >> ansible-galaxy collection install community.vmware
### yum update -y && yum install epel-release -y
### yum install python3 -y &&  pip3 install ansible
### sudo pip3 install netapp-lib solidfire-sdk-python requests && ansible-galaxy collection install netapp.ontap netapp.elementsw -p /usr/share/ansible/collections 
### sudo chmod +rx /usr/share/ansible/collections

---
- hosts: localhost
  gather_facts: false
  collections:
    - netapp.ontap

  vars_files:
    - vars.yaml
    - current_ds.yaml

  vars:
    login: &drlogin
      hostname: "{{ ontap_drhostname }}"
      username: "{{ ontap_drusername }}"
      password: "{{ ontap_drpassword }}"
      https: true
      validate_certs: false
  
  tasks:
    ##Power Off VMs
    - name: Set the state of a virtual machine to poweroff
      vmware_guest_powerstate:
        hostname: "{{ vcenter_drhostname }}"
        username: "{{ vcenter_drusername }}"
        password: "{{ vcenter_drpassword }}"
        validate_certs: no
        name: "{{ item }}"
        state: powered-off
      with_items: "{{ vm_drname }}"
      delegate_to: localhost
      register: deploy
    
    ##Unregister VMs
    - name: Remove a virtual machine
      vmware_guest:
        hostname: "{{ vcenter_drhostname }}"
        username: "{{ vcenter_drusername }}"
        password: "{{ vcenter_drpassword }}"
        validate_certs: no
        name: "{{ item }}"
        state: absent
      with_items: "{{ vm_drname }}"
      delegate_to: localhost

    ##Unmount and Remove Clone Datastores
    - name: Unmount and Remove Clone Datastores from a ESXi
      vmware_host_datastore:
        hostname: "{{ vcenter_drhostname }}"
        username: "{{ vcenter_drusername }}"
        password: "{{ vcenter_drpassword }}"
        validate_certs: no
        datastore_name: "{{ item.1 }}"
        esxi_hostname: "{{ item.0 }}"
        state: absent
      with_nested:
        - "{{ inventory_drhostname }}"
        - "{{ clone_datastore }}"
      delegate_to: localhost

    ##Get all volumes after clone
    - name: Get volume
      uri: 
        url: "https://{{ sfuser }}:{{ sfpassword }}@{{ sfhostname }}/json-rpc/11.0/"
        method: POST
        return_content: yes
        body: >
          {
            "method": "ListVolumes",
            "params": {
              "includeVirtualVolumes": false
            }
          }
        body_format: json
        validate_certs: no
      register: listvolume

    ##Get all volumes after clone
    # - name: list Volume
    #   debug:
    #     msg: "{{ listvolume }}"

    ##Get all volumes ID after clone   
    - name: Get volume ID with clone
      set_fact:
        listvolumeid: "{{ listvolumeid | default([]) + [ sf.volumeID ] }}"
      with_items: "{{ listvolume.json.result.volumes }}"
      when: sf.name is match("clone*")
      loop_control:
        loop_var: sf

    # - name: print clone ID
    #   debug:
    #     msg: "{{ listvolumeid }}"

    ##Delete Clone Volumes
    - name: Delete Clone Volumes
      uri: 
        url: "https://{{ sfuser }}:{{ sfpassword }}@{{ sfhostname }}/json-rpc/11.0/"
        method: POST
        return_content: yes
        body: >
          {
            "method": "DeleteVolumes",
            "params": {
              "volumeIDs": [{{ item }}]
            }
          }
        body_format: json
        validate_certs: no
      with_items: "{{ listvolumeid }}"

...